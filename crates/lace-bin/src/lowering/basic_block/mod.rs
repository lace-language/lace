use crate::lowering::lir;
use crate::lowering::lir::Label;
use crate::lowering::variable::VariableDeclarations;
use crate::lowering::LoweringContext;

mod child;
mod terminate;
mod variables;
mod visit;

pub type BlockList = Vec<lir::BasicBlock>;

/// At first a BasicBlockBuilder looks something like this:
/// ```
/// current_label: // same as first_label
///     statement
///     ...
///     statement
/// ```
///
/// Then, when a terminator is emitted, it will look something like this:
///
/// ```
///     <blocklist>
/// current_label:
///     statement
///     ...
///     statement
/// ```
///
/// Where in both cases, the statements of the part of the block we are *currently*
/// working on are stored in statements. Whenever we hit a terminator, the statements
/// that we are *currently* working on are turned into a basic block (with accompanying
/// label and terminator) which is put in the blocklist, so we can keep generating more
/// statements in what will be the next block.
///
/// To jump to a block that's being built, you can use the [`first_label`](BasicBlockBuilder::first_label) on a BlockBuilder
///
/// Sometimes, it's desirable to generate some basic blocks, then put a terminator on the
/// current block, and then jump to some of the blocks you just generated. In that case,
/// use [`child`](BasicBlockBuilder::child) and [`insert`](BasicBlockBuilder::insert).
pub struct BasicBlockBuilder<'l, 'b, 't, 'a, 'n> {
    /// the blocks that were already generated
    blocks: BlockList,

    /// the label of the current part of the block that's being built
    current_label: Label,

    /// the statements for the current block that's being built
    current_statements: Vec<lir::Statement>,

    // Option so we can temporarily move out of it in child
    /// Warning: use [`Self::ctx`]
    __ctx: Option<&'l mut LoweringContext<'b, 't, 'a, 'n>>,

    // Option so we can temporarily move out of it in child
    /// Warning: use [`Self::vd`]
    __vd: Option<&'l mut VariableDeclarations>,
}

impl<'l, 'b, 't, 'a, 'n> BasicBlockBuilder<'l, 'b, 't, 'a, 'n> {
    pub fn new(
        ctx: &'l mut LoweringContext<'b, 't, 'a, 'n>,
        vd: &'l mut VariableDeclarations,
    ) -> Self {
        Self {
            blocks: Vec::new(),
            current_label: ctx.fresh_label(),
            current_statements: Vec::new(),
            __ctx: Some(ctx),
            __vd: Some(vd),
        }
    }

    /// Get the first label of a basic block builder. That's
    /// either the first label in `blocks`, or `current_label` if `blocks`
    /// is empty. This is useful when jumping to all the code generated by
    /// a basic block builder (which might be multiple blocks), especially after
    /// a [`child`](Self::child) call
    fn first_label(&self) -> Label {
        if let Some(i) = self.blocks.first() {
            i.name
        } else {
            self.current_label
        }
    }
}
